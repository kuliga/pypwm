-- File: PwmControl.vhd
-- Generated by MyHDL 0.11
-- Date: Mon Dec  6 19:03:31 2021


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity PwmControl is
    port (
        clk: in std_logic;
        rst_n: in std_logic;
        duty_cycle: in unsigned(31 downto 0);
        period: in unsigned(31 downto 0);
        pwm: out std_logic
    );
end entity PwmControl;
-- PWM module
-- Author: Jan Kuliga (4EiT)
-- Date: 03.12.2021
-- ###############
-- clk - clock input
-- rst - reset input
-- duty_cycle - input, requested duty cycle (in number of clock cycles)
-- period - period of a time between continuous pwm cycles (in number of clock cycles)
-- pwm - output

architecture MyHDL of PwmControl is



signal cnt: unsigned(31 downto 0) := 32X"00000000";
signal cycle_completed: std_logic := '0';
signal duty_cycle_reg: unsigned(31 downto 0) := 32X"00000000";

begin




PWMCONTROL_SET_PWM: process (clk, rst_n) is
begin
    if (rst_n = '0') then
        cycle_completed <= '0';
        pwm <= '0';
        cnt <= to_unsigned(0, 32);
    elsif rising_edge(clk) then
        if (rst_n = '0') then
            pwm <= '0';
            cnt <= to_unsigned(0, 32);
            cycle_completed <= '1';
        else
            if (cnt < period) then
                cnt <= (cnt + 1);
                cycle_completed <= '0';
                if (cnt < duty_cycle_reg) then
                    pwm <= '1';
                else
                    pwm <= '0';
                end if;
            else
                cnt <= to_unsigned(0, 32);
                pwm <= '0';
                cycle_completed <= '1';
            end if;
        end if;
    end if;
end process PWMCONTROL_SET_PWM;

PWMCONTROL_SET_DUTY_CYCLE: process (clk, rst_n) is
begin
    if (rst_n = '0') then
        duty_cycle_reg <= to_unsigned(0, 32);
    elsif rising_edge(clk) then
        if (rst_n = '0') then
            duty_cycle_reg <= to_unsigned(0, 32);
        else
            if (cycle_completed = '1') then
                duty_cycle_reg <= duty_cycle;
            else
                duty_cycle_reg <= duty_cycle_reg;
            end if;
        end if;
    end if;
end process PWMCONTROL_SET_DUTY_CYCLE;

end architecture MyHDL;
